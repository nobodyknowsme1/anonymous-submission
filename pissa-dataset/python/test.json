[
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n\t\"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\tFalse\n\t>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\tTrue\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/0",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\t\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separate_paren_groups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/1",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef truncate_number(number: float) -> float:\n\t\"\"\" Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncate_number(3.5)\n\t0.5\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/2",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n\t\"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return True. Otherwise it should return False.\n\t>>> below_zero([1, 2, 3])\n\tFalse\n\t>>> below_zero([1, 2, -4, 5])\n\tTrue\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/3",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n\t\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/4",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\t\"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/5",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\t\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parse_nested_parens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/6",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n\t\"\"\" Filter an input list of strings only for ones that contain given substring\n\t>>> filter_by_substring([], 'a')\n\t[]\n\t>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/7",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n\t\"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sum_product([])\n\t(0, 1)\n\t>>> sum_product([1, 2, 3, 4])\n\t(10, 24)\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/8",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\t\"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/9",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef is_palindrome(string: str) -> bool:\n\t\"\"\" Test if given string is a palindrome \"\"\"\n\treturn string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\t\"\"\" Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> make_palindrome('')\n\t''\n\t>>> make_palindrome('cat')\n\t'catac'\n\t>>> make_palindrome('cata')\n\t'catac'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/10",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n\t\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> string_xor('010', '110')\n\t'100'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/11",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n\t\"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return None in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/12",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n\t\"\"\" Return a greatest common divisor of two integers a and b\n\t>>> greatest_common_divisor(3, 5)\n\t1\n\t>>> greatest_common_divisor(25, 15)\n\t5\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/13",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n\t\"\"\" Return list of all prefixes from shortest to longest of the input string\n\t>>> all_prefixes('abc')\n\t['a', 'ab', 'abc']\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/14",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef string_sequence(n: int) -> str:\n\t\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> string_sequence(0)\n\t'0'\n\t>>> string_sequence(5)\n\t'0 1 2 3 4 5'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/15",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef count_distinct_characters(string: str) -> int:\n\t\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> count_distinct_characters('xyzXYZ')\n\t3\n\t>>> count_distinct_characters('Jerry')\n\t4\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/16",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n\t\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/17",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef how_many_times(string: str, substring: str) -> int:\n\t\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> how_many_times('', 'a')\n\t0\n\t>>> how_many_times('aaa', 'a')\n\t3\n\t>>> how_many_times('aaaa', 'aa')\n\t3\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/18",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n\t\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sort_numbers('three one five')\n\t'one three five'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/19",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\t\"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/20",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\t\"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/21",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n\t\"\"\" Filter given list of any python values only for integers\n\t>>> filter_integers(['a', 3.14, 5])\n\t[5]\n\t>>> filter_integers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/22",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef strlen(string: str) -> int:\n\t\"\"\" Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/23",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef largest_divisor(n: int) -> int:\n\t\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largest_divisor(15)\n\t5\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/24",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n\t\"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/25",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\t\"\"\" From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> remove_duplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/26",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef flip_case(string: str) -> str:\n\t\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flip_case('Hello')\n\t'hELLO'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/27",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n\t\"\"\" Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/28",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n\t\"\"\" Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filter_by_prefix([], 'a')\n\t[]\n\t>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/29",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef get_positive(l: list):\n\t\"\"\"Return only positive numbers in the list.\n\t>>> get_positive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/30",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef is_prime(n):\n\t\"\"\"Return true if a given number is prime, and false otherwise.\n\t>>> is_prime(6)\n\tFalse\n\t>>> is_prime(101)\n\tTrue\n\t>>> is_prime(11)\n\tTrue\n\t>>> is_prime(13441)\n\tTrue\n\t>>> is_prime(61)\n\tTrue\n\t>>> is_prime(4)\n\tFalse\n\t>>> is_prime(1)\n\tFalse\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/31",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nimport math\n\n\ndef poly(xs: list, x: float):\n\t\"\"\"\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\t\"\"\"\n\treturn sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\t\"\"\" xs are coefficients of a polynomial.\n\tfind_zero find x such that poly(x) = 0.\n\tfind_zero returns only only zero point, even if there are many.\n\tMoreover, find_zero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/32",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef sort_third(l: list):\n\t\"\"\"This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sort_third([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/33",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef unique(l: list):\n\t\"\"\"Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/34",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef max_element(l: list):\n\t\"\"\"Return maximum element in the list.\n\t>>> max_element([1, 2, 3])\n\t3\n\t>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/35",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef fizz_buzz(n: int):\n\t\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizz_buzz(50)\n\t0\n\t>>> fizz_buzz(78)\n\t2\n\t>>> fizz_buzz(79)\n\t3\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/36",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef sort_even(l: list):\n\t\"\"\"This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sort_even([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sort_even([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/37",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef encode_cyclic(s: str):\n\t\"\"\"\n\treturns encoded string by cycling groups of three characters.\n\t\"\"\"\n\t# split string to groups. Each of length 3.\n\tgroups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n\t# cycle elements in each group. Unless group has fewer elements than 3.\n\tgroups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n\treturn \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\t\"\"\"\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/38",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef prime_fib(n: int):\n\t\"\"\"\n\tprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> prime_fib(1)\n\t2\n\t>>> prime_fib(2)\n\t3\n\t>>> prime_fib(3)\n\t5\n\t>>> prime_fib(4)\n\t13\n\t>>> prime_fib(5)\n\t89\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/39",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef triples_sum_to_zero(l: list):\n\t\"\"\"\n\ttriples_sum_to_zero takes a list of integers as an input.\n\tit returns True if there are three distinct elements in the list that\n\tsum to zero, and False otherwise.\n\n\t>>> triples_sum_to_zero([1, 3, 5, 0])\n\tFalse\n\t>>> triples_sum_to_zero([1, 3, -2, 1])\n\tTrue\n\t>>> triples_sum_to_zero([1, 2, 3, 7])\n\tFalse\n\t>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\tTrue\n\t>>> triples_sum_to_zero([1])\n\tFalse\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/40",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef car_race_collision(n: int):\n\t\"\"\"\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/41",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef incr_list(l: list):\n\t\"\"\"Return list with elements incremented by 1.\n\t>>> incr_list([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/42",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef pairs_sum_to_zero(l):\n\t\"\"\"\n\tpairs_sum_to_zero takes a list of integers as an input.\n\tit returns True if there are two distinct elements in the list that\n\tsum to zero, and False otherwise.\n\t>>> pairs_sum_to_zero([1, 3, 5, 0])\n\tFalse\n\t>>> pairs_sum_to_zero([1, 3, -2, 1])\n\tFalse\n\t>>> pairs_sum_to_zero([1, 2, 3, 7])\n\tFalse\n\t>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n\tTrue\n\t>>> pairs_sum_to_zero([1])\n\tFalse\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/43",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef change_base(x: int, base: int):\n\t\"\"\"Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> change_base(8, 3)\n\t'22'\n\t>>> change_base(8, 2)\n\t'1000'\n\t>>> change_base(7, 2)\n\t'111'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/44",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef triangle_area(a, h):\n\t\"\"\"Given length of a side and high return area for a triangle.\n\t>>> triangle_area(5, 3)\n\t7.5\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/45",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef fib4(n: int):\n\t\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/46",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef median(l: list):\n\t\"\"\"Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t15.0\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/47",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef is_palindrome(text: str):\n\t\"\"\"\n\tChecks if given string is a palindrome\n\t>>> is_palindrome('')\n\tTrue\n\t>>> is_palindrome('aba')\n\tTrue\n\t>>> is_palindrome('aaaaa')\n\tTrue\n\t>>> is_palindrome('zbcd')\n\tFalse\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/48",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef modp(n: int, p: int):\n\t\"\"\"Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/49",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef encode_shift(s: str):\n\t\"\"\"\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t\"\"\"\n\treturn \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n\t\"\"\"\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/50",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef remove_vowels(text):\n\t\"\"\"\n\tremove_vowels is a function that takes string and returns string without vowels.\n\t>>> remove_vowels('')\n\t''\n\t>>> remove_vowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> remove_vowels('abcdef')\n\t'bcdf'\n\t>>> remove_vowels('aaaaa')\n\t''\n\t>>> remove_vowels('aaBAA')\n\t'B'\n\t>>> remove_vowels('zbcd')\n\t'zbcd'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/51",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef below_threshold(l: list, t: int):\n\t\"\"\"Return True if all numbers in the list l are below threshold t.\n\t>>> below_threshold([1, 2, 4, 10], 100)\n\tTrue\n\t>>> below_threshold([1, 20, 4, 10], 5)\n\tFalse\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/52",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef add(x: int, y: int):\n\t\"\"\"Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/53",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef same_chars(s0: str, s1: str):\n\t\"\"\"\n\tCheck if two words have the same characters.\n\t>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\tTrue\n\t>>> same_chars('abcd', 'dddddddabc')\n\tTrue\n\t>>> same_chars('dddddddabc', 'abcd')\n\tTrue\n\t>>> same_chars('eabcd', 'dddddddabc')\n\tFalse\n\t>>> same_chars('abcd', 'dddddddabce')\n\tFalse\n\t>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tFalse\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/54",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef fib(n: int):\n\t\"\"\"Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/55",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef correct_bracketing(brackets: str):\n\t\"\"\" brackets is a string of \"<\" and \">\".\n\treturn True if every opening bracket has a corresponding closing bracket.\n\n\t>>> correct_bracketing(\"<\")\n\tFalse\n\t>>> correct_bracketing(\"<>\")\n\tTrue\n\t>>> correct_bracketing(\"<<><>>\")\n\tTrue\n\t>>> correct_bracketing(\"><<>\")\n\tFalse\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/56",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef monotonic(l: list):\n\t\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\tTrue\n\t>>> monotonic([1, 20, 4, 10])\n\tFalse\n\t>>> monotonic([4, 1, 0, -10])\n\tTrue\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/57",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef common(l1: list, l2: list):\n\t\"\"\"Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/58",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef largest_prime_factor(n: int):\n\t\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largest_prime_factor(13195)\n\t29\n\t>>> largest_prime_factor(2048)\n\t2\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/59",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef sum_to_n(n: int):\n\t\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n\t>>> sum_to_n(30)\n\t465\n\t>>> sum_to_n(100)\n\t5050\n\t>>> sum_to_n(5)\n\t15\n\t>>> sum_to_n(10)\n\t55\n\t>>> sum_to_n(1)\n\t1\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/60",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef correct_bracketing(brackets: str):\n\t\"\"\" brackets is a string of \"(\" and \")\".\n\treturn True if every opening bracket has a corresponding closing bracket.\n\n\t>>> correct_bracketing(\"(\")\n\tFalse\n\t>>> correct_bracketing(\"()\")\n\tTrue\n\t>>> correct_bracketing(\"(()())\")\n\tTrue\n\t>>> correct_bracketing(\")(()\")\n\tFalse\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/61",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef derivative(xs: list):\n\t\"\"\" xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 + ....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/62",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef fibfib(n: int):\n\t\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/63",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n\t\"\"\"Write a function vowels_count which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowels_count(\"abcde\")\n\t2\n\t>>> vowels_count(\"ACEDY\")\n\t3\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/64",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef circular_shift(x, shift):\n\t\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circular_shift(12, 1)\n\t\"21\"\n\t>>> circular_shift(12, 2)\n\t\"12\"\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/65",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef digitSum(s):\n\t\"\"\"Task\n\tWrite a function that takes a string as input and returns the sum of the upper characters only'\n\tASCII codes.\n\n\tExamples:\n\t\tdigitSum(\"\") => 0\n\t\tdigitSum(\"abAB\") => 131\n\t\tdigitSum(\"abcCd\") => 67\n\t\tdigitSum(\"helloE\") => 69\n\t\tdigitSum(\"woArBld\") => 131\n\t\tdigitSum(\"aAaaaXa\") => 153\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/66",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef fruit_distribution(s,n):\n\t\"\"\"\n\tIn this task, you will be given a string that represents a number of apples and oranges \n\tthat are distributed in a basket of fruit this basket contains \n\tapples, oranges, and mango fruits. Given the string that represents the total number of \n\tthe oranges and apples and an integer that represent the total number of the fruits \n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/67",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef pluck(arr):\n\t\"\"\"\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\tInput: [4,2,3]\n\t\tOutput: [2, 1]\n\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\tInput: [1,2,3]\n\t\tOutput: [2, 1]\n\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index. \n\n\tExample 3:\n\t\tInput: []\n\t\tOutput: []\n\t\n\tExample 4:\n\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\tOutput: [0, 1]\n\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t* 1 <= nodes.length <= 10000\n\t\t* 0 <= node.value\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/68",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef search(lst):\n\t'''\n\tYou are given a non-empty list of positive integers. Return the greatest integer that is greater than \n\tzero, and has a frequency greater than or equal to the value of the integer itself. \n\tThe frequency of an integer is the number of times it appears in the list.\n\tIf no such a value exist, return -1.\n\tExamples:\n\t\tsearch([4, 1, 2, 2, 3, 1]) == 2\n\t\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n\t\tsearch([5, 5, 4, 4, 4]) == -1\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/69",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef strange_sort_list(lst):\n\t'''\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrange_sort_list([]) == []\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/70",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef triangle_area(a, b, c):\n\t'''\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater \n\tthan the third side.\n\tExample:\n\ttriangle_area(3, 4, 5) == 6.00\n\ttriangle_area(1, 2, 10) == -1\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/71",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef will_it_fly(q,w):\n\t'''\n\tWrite a function that returns True if the object q will fly, and False otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twill_it_fly([1, 2], 5) \u279e False \n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twill_it_fly([3, 2, 3], 1) \u279e False\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twill_it_fly([3, 2, 3], 9) \u279e True\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twill_it_fly([3], 5) \u279e True\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/72",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef smallest_change(arr):\n\t\"\"\"\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallest_change([1,2,3,5,4,7,9,6]) == 4\n\tsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallest_change([1, 2, 3, 2, 1]) == 0\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/73",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef total_match(lst1, lst2):\n\t'''\n\tWrite a function that accepts two lists of strings and returns the list that has \n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotal_match([], []) \u279e []\n\ttotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n\ttotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n\ttotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n\ttotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/74",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_multiply_prime(a):\n\t\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100. \n\tExample:\n\tis_multiply_prime(30) == True\n\t30 = 2 * 3 * 5\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/75",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_simple_power(x, n):\n\t\"\"\"Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tis_simple_power(1, 4) => true\n\tis_simple_power(2, 2) => true\n\tis_simple_power(8, 2) => true\n\tis_simple_power(3, 2) => false\n\tis_simple_power(3, 1) => false\n\tis_simple_power(5, 3) => false\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/76",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef iscube(a):\n\t'''\n\tWrite a function that takes an integer a and returns True \n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> True\n\tiscube(2) ==> False\n\tiscube(-1) ==> True\n\tiscube(64) ==> True\n\tiscube(0) ==> True\n\tiscube(180) ==> False\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/77",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef hex_key(num):\n\t\"\"\"You have been tasked to write a function that receives \n\ta hexadecimal number as a string and counts the number of hexadecimal \n\tdigits that are primes (prime number, or a prime, is a natural number \n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\tPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\tSo you have to determine a number of the following digits: 2, 3, 5, 7, \n\tB (=decimal 11), D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string, \n\tand symbols A,B,C,D,E,F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/78",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef decimal_to_binary(decimal):\n\t\"\"\"You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimal_to_binary(15)   # returns \"db1111db\"\n\tdecimal_to_binary(32)   # returns \"db100000db\"\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/79",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_happy(s):\n\t\"\"\"You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tis_happy(a) => False\n\tis_happy(aa) => False\n\tis_happy(abcd) => True\n\tis_happy(aabb) => False\n\tis_happy(adb) => True\n\tis_happy(xyy) => False\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/80",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef numerical_letter_grade(grades):\n\t\"\"\"It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write \n\ta function that can output a list of letter grades using the following table:\n\t\t\t GPA\t   |\tLetter grade\n\t\t\t  4.0\t\t\t\tA+\n\t\t\t> 3.7\t\t\t\tA \n\t\t\t> 3.3\t\t\t\tA- \n\t\t\t> 3.0\t\t\t\tB+\n\t\t\t> 2.7\t\t\t\tB \n\t\t\t> 2.3\t\t\t\tB-\n\t\t\t> 2.0\t\t\t\tC+\n\t\t\t> 1.7\t\t\t\tC\n\t\t\t> 1.3\t\t\t\tC-\n\t\t\t> 1.0\t\t\t\tD+ \n\t\t\t> 0.7\t\t\t\tD \n\t\t\t> 0.0\t\t\t\tD-\n\t\t\t  0.0\t\t\t\tE\n\t\n\n\tExample:\n\tgrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/81",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef prime_length(string):\n\t\"\"\"Write a function that takes a string and returns True if the string\n\tlength is a prime number or False otherwise\n\tExamples\n\tprime_length('Hello') == True\n\tprime_length('abcdcba') == True\n\tprime_length('kittens') == True\n\tprime_length('orange') == False\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/82",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef starts_one_ends(n):\n\t\"\"\"\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/83",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef solve(N):\n\t\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\t\n\tExample\n\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n\t\n\tVariables:\n\t\t@N integer\n\t\t\t Constraints: 0 \u2264 N \u2264 10000.\n\tOutput:\n\t\t a string of binary number\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/84",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef add(lst):\n\t\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\tadd([4, 2, 6, 7]) ==> 2 \n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/85",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef anti_shuffle(s):\n\t\"\"\"\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tanti_shuffle('Hi') returns 'Hi'\n\tanti_shuffle('hello') returns 'ehllo'\n\tanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/86",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef get_row(lst, x):\n\t\"\"\"\n\tYou are given a 2 dimensional data, as a nested lists,\n\twhich is similar to matrix, however, unlike matrices,\n\teach row may contain a different number of columns.\n\tGiven lst, and integer x, find integers x in the list,\n\tand return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\teach tuple is a coordinate - (row, columns), starting with 0.\n\tSort coordinates initially by rows in ascending order.\n\tAlso, sort coordinates of the row by columns in descending order.\n\t\n\tExamples:\n\tget_row([\n\t  [1,2,3,4,5,6],\n\t  [1,2,3,4,1,6],\n\t  [1,2,3,4,5,1]\n\t], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\tget_row([], 1) == []\n\tget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/87",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef sort_array(array):\n\t\"\"\"\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sort_array([]) => []\n\t* sort_array([5]) => [5]\n\t* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/88",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef encrypt(s):\n\t\"\"\"Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/89",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef next_smallest(lst):\n\t\"\"\"\n\tYou are given a list of integers.\n\tWrite a function next_smallest() that returns the 2nd smallest element of the list.\n\tReturn None if there is no such element.\n\t\n\tnext_smallest([1, 2, 3, 4, 5]) == 2\n\tnext_smallest([5, 1, 4, 3, 2]) == 2\n\tnext_smallest([]) == None\n\tnext_smallest([1, 1]) == None\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/90",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_bored(S):\n\t\"\"\"\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n   \n\tFor example:\n\t>>> is_bored(\"Hello world\")\n\t0\n\t>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/91",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef any_int(x, y, z):\n\t'''\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\t\n\tExamples\n\tany_int(5, 2, 7) \u279e True\n\t\n\tany_int(3, 2, 2) \u279e False\n\n\tany_int(3, -2, 1) \u279e True\n\t\n\tany_int(3.6, -2.2, 2) \u279e False\n  \n\n\t\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/92",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef encode(message):\n\t\"\"\"\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n\t\n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/93",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef skjkasdkd(lst):\n\t\"\"\"You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/94",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef check_dict_case(dict):\n\t\"\"\"\n\tGiven a dictionary, return True if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return False.\n\tThe function should return False is the given dictionary is empty.\n\tExamples:\n\tcheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\tcheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n\tcheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n\tcheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\tcheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/95",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef count_up_to(n):\n\t\"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcount_up_to(5) => [2,3]\n\tcount_up_to(11) => [2,3,5,7]\n\tcount_up_to(0) => []\n\tcount_up_to(20) => [2,3,5,7,11,13,17,19]\n\tcount_up_to(1) => []\n\tcount_up_to(18) => [2,3,5,7,11,13,17]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/96",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef multiply(a, b):\n\t\"\"\"Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/97",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef count_upper(s):\n\t\"\"\"\n\tGiven a string s, count the number of uppercase vowels in even indices.\n\t\n\tFor example:\n\tcount_upper('aBCdEf') returns 1\n\tcount_upper('abcdefg') returns 0\n\tcount_upper('dBBE') returns 0\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/98",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef closest_integer(value):\n\t'''\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\n\tExamples\n\t>>> closest_integer(\"10\")\n\t10\n\t>>> closest_integer(\"15.3\")\n\t15\n\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closest_integer(\"14.5\") should\n\treturn 15 and closest_integer(\"-14.5\") should return -15.\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/99",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef make_a_pile(n):\n\t\"\"\"\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t- the next odd number if n is odd.\n\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> make_a_pile(3)\n\t[3, 5, 7]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/100",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef words_string(s):\n\t\"\"\"\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n\t\n\tFor example:\n\twords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/101",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef choose_num(x, y):\n\t\"\"\"This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchoose_num(12, 15) = 14\n\tchoose_num(13, 12) = -1\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/102",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef rounded_avg(n, m):\n\t\"\"\"You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\trounded_avg(1, 5) => \"0b11\"\n\trounded_avg(7, 5) => -1\n\trounded_avg(10, 20) => \"0b1111\"\n\trounded_avg(20, 33) => \"0b11010\"\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/103",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef unique_digits(x):\n\t\"\"\"Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n\t\n\tFor example:\n\t>>> unique_digits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> unique_digits([152, 323, 1422, 10])\n\t[]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/104",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef by_length(arr):\n\t\"\"\"\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t  arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t  return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\t\n\t  If the array is empty, return an empty array:\n\t  arr = []\n\t  return []\n\t\n\t  If the array has any strange number ignore it:\n\t  arr = [1, -1 , 55] \n\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t-> reverse arr -> [55, 1, -1]\n\t  return = ['One']\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/105",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef f(n):\n\t\"\"\" Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/106",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef even_odd_palindrome(n):\n\t\"\"\"\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\tInput: 3\n\t\tOutput: (1, 2)\n\t\tExplanation:\n\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\tInput: 12\n\t\tOutput: (4, 6)\n\t\tExplanation:\n\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t1. 1 <= n <= 10^3\n\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/107",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef count_nums(arr):\n\t\"\"\"\n\tWrite a function count_nums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> count_nums([]) == 0\n\t>>> count_nums([-1, 11, -11]) == 1\n\t>>> count_nums([1, 1, 2]) == 3\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/108",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef move_one_ball(arr):\n\t\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\tYou are allowed to perform right shift operation any number of times.\n\t\n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return True else return False.\n\tIf the given array is empty then return True.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n\t\n\tmove_one_ball([3, 4, 5, 1, 2])==>True\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t be achieved for the given array.\n\tmove_one_ball([3, 5, 4, 1, 2])==>False\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\tarray by performing any number of right shift operations.\n\t\t\t\t\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/109",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef exchange(lst1, lst2):\n\t\"\"\"In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/110",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef histogram(test):\n\t\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n\t\n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/111",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef reverse_delete(s,c):\n\t\"\"\"Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and True/False for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/112",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef odd_count(lst):\n\t\"\"\"Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> odd_count(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> odd_count(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/113",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef minSubArraySum(nums):\n\t\"\"\"\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/114",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef max_fill(grid, capacity):\n\timport math\n\t\"\"\"\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\tInput: \n\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\tbucket_capacity : 1\n\t\tOutput: 6\n\n\tExample 2:\n\t\tInput: \n\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\tbucket_capacity : 2\n\t\tOutput: 5\n\t\n\tExample 3:\n\t\tInput: \n\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\tbucket_capacity : 5\n\t\tOutput: 0\n\n\tConstraints:\n\t\t* all wells have the same length\n\t\t* 1 <= grid.length <= 10^2\n\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t* grid[i][j] -> 0 | 1\n\t\t* 1 <= capacity <= 10\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/115",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef sort_array(arr):\n\t\"\"\"\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/116",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef select_words(s, n):\n\t\"\"\"Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\tselect_words(\"simple white space\", 2) ==> []\n\tselect_words(\"Hello world\", 4) ==> [\"world\"]\n\tselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/117",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef get_closest_vowel(word):\n\t\"\"\"You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n\t\n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tget_closest_vowel(\"yogurt\") ==> \"u\"\n\tget_closest_vowel(\"FULL\") ==> \"U\"\n\tget_closest_vowel(\"quick\") ==> \"\"\n\tget_closest_vowel(\"ab\") ==> \"\"\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/118",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef match_parens(lst):\n\t'''\n\tYou are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n\tExamples:\n\tmatch_parens(['()(', ')']) == 'Yes'\n\tmatch_parens([')', ')']) == 'No'\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/119",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef maximum(arr, k):\n\t\"\"\"\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\tInput: arr = [-3, -4, 5], k = 3\n\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\tInput: arr = [4, -4, 4], k = 2\n\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\tOutput: [2]\n\n\tNote:\n\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t3. 0 <= k <= len(arr)\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/120",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef solution(lst):\n\t\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\t\n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/121",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef add_elements(arr, k):\n\t\"\"\"\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t1. 1 <= len(arr) <= 100\n\t\t2. 1 <= k <= len(arr)\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/122",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef get_odd_collatz(n):\n\t\"\"\"\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t1. Collatz(1) is [1].\n\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/123",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef valid_date(date):\n\t\"\"\"You have to write a function which validates a given date string and\n\treturns True if the date is valid otherwise False.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalid_date('03-11-2000') => True\n\n\tvalid_date('15-01-2012') => False\n\n\tvalid_date('04-0-2040') => False\n\n\tvalid_date('06-04-2020') => True\n\n\tvalid_date('06/04/2020') => False\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/124",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef split_words(txt):\n\t'''\n\tGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\tExamples\n\tsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n\tsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n\tsplit_words(\"abcdef\") == 3 \n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/125",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_sorted(lst):\n\t'''\n\tGiven a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return False. Assume no negative numbers and only integers.\n\n\tExamples\n\tis_sorted([5]) \u279e True\n\tis_sorted([1, 2, 3, 4, 5]) \u279e True\n\tis_sorted([1, 3, 2, 4, 5]) \u279e False\n\tis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n\tis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n\tis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n\tis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n\tis_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/126",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef intersection(interval1, interval2):\n\t\"\"\"You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/127",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef prod_signs(arr):\n\t\"\"\"\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return None for empty arr.\n\n\tExample:\n\t>>> prod_signs([1, 2, 2, -4]) == -9\n\t>>> prod_signs([0, 1]) == 0\n\t>>> prod_signs([]) == None\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/128",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef minPath(grid, k):\n\t\"\"\"\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\tOutput: [1, 2, 1]\n\n\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\tOutput: [1]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/129",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef tri(n):\n\t\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t   = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/130",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef digits(n):\n\t\"\"\"Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/131",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_nested(string):\n\t'''\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return True if and only if there is a valid subsequence of brackets \n\twhere at least one bracket in the subsequence is nested.\n\n\tis_nested('[[]]') \u279e True\n\tis_nested('[]]]]]]][[[[[]') \u279e False\n\tis_nested('[][]') \u279e False\n\tis_nested('[]') \u279e False\n\tis_nested('[[][]]') \u279e True\n\tis_nested('[[]][[') \u279e True\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/132",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef sum_squares(lst):\n\t\"\"\"You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n\t\n\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/133",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef check_if_last_char_is_a_letter(txt):\n\t'''\n\tCreate a function that returns True if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and False otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\n\tExamples:\n\tcheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\n\tcheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n\tcheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n\tcheck_if_last_char_is_a_letter(\"\") \u279e False \n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/134",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef can_arrange(arr):\n\t\"\"\"Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcan_arrange([1,2,4,3,5]) = 3\n\tcan_arrange([1,2,3]) = -1\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/135",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef largest_smallest_integers(lst):\n\t'''\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as None.\n\n\tExamples:\n\tlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n\tlargest_smallest_integers([]) == (None, None)\n\tlargest_smallest_integers([0]) == (None, None)\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/136",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef compare_one(a, b):\n\t\"\"\"\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn None if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be . or ,\n\n\tcompare_one(1, 2.5) \u279e 2.5\n\tcompare_one(1, \"2,3\") \u279e \"2,3\"\n\tcompare_one(\"5,1\", \"6\") \u279e \"6\"\n\tcompare_one(\"1\", 1) \u279e None\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/137",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_equal_to_sum_even(n):\n\t\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tis_equal_to_sum_even(4) == False\n\tis_equal_to_sum_even(6) == False\n\tis_equal_to_sum_even(8) == True\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/138",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef special_factorial(n):\n\t\"\"\"The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> special_factorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/139",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef fix_spaces(text):\n\t\"\"\"\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n\t\n\tfix_spaces(\"Example\") == \"Example\"\n\tfix_spaces(\"Example 1\") == \"Example_1\"\n\tfix_spaces(\" Example 2\") == \"_Example_2\"\n\tfix_spaces(\" Example   3\") == \"_Example-3\"\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/140",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef file_name_check(file_name):\n\t\"\"\"Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfile_name_check(\"example.txt\") # => 'Yes'\n\tfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/141",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\n\ndef sum_squares(lst):\n\t\"\"\"\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\t\n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/142",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef words_in_sentence(sentence):\n\t\"\"\"\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\tInput: sentence = \"This is a test\"\n\t\tOutput: \"is\"\n\n\tExample 2:\n\t\tInput: sentence = \"lets go for swimming\"\n\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t* 1 <= len(sentence) <= 100\n\t\t* sentence contains only letters\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/143",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef simplify(x, n):\n\t\"\"\"Your task is to implement a function that will simplify the expression\n\tx * n. The function returns True if x * n evaluates to a whole number and False\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = True\n\tsimplify(\"1/6\", \"2/1\") = False\n\tsimplify(\"7/10\", \"10/2\") = False\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/144",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef order_by_points(nums):\n\t\"\"\"\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> order_by_points([]) == []\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/145",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef specialFilter(nums):\n\t\"\"\"Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/146",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef get_max_triples(n):\n\t\"\"\"\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\tFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\tInput: n = 5\n\t\tOutput: 1\n\t\tExplanation: \n\t\ta = [1, 3, 7, 13, 21]\n\t\tThe only valid triple is (1, 7, 13).\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/147",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef bf(planet1, planet2):\n\t'''\n\tThere are eight planets in our solar system: the closerst to the Sun \n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2. \n\tThe function should return a tuple containing all planets whose orbits are \n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by \n\tthe proximity to the sun. \n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names. \n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/148",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef sorted_list_sum(lst):\n\t\"\"\"Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/149",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef x_or_y(n, x, y):\n\t\"\"\"A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor x_or_y(7, 34, 12) == 34\n\tfor x_or_y(15, 8, 5) == 5\n\t\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/150",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef double_the_difference(lst):\n\t'''\n\tGiven a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n\t\n\tdouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdouble_the_difference([-1, -2, 0]) == 0\n\tdouble_the_difference([9, -2]) == 81\n\tdouble_the_difference([0]) == 0  \n   \n\tIf the input list is empty, return 0.\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/151",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef compare(game,guess):\n\t\"\"\"I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\t\n\t\n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/152",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef Strongest_Extension(class_name, extensions):\n\t\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters \n\tin the extension's name, the strength is given by the fraction CAP - SM. \n\tYou should find the strongest extension and return a string in this \n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n\t(its strength is -1).\n\tExample:\n\tfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/153",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef cycpattern_check(a , b):\n\t\"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n\tcycpattern_check(\"abcd\",\"abd\") => False\n\tcycpattern_check(\"hello\",\"ell\") => True\n\tcycpattern_check(\"whassup\",\"psus\") => False\n\tcycpattern_check(\"abab\",\"baa\") => True\n\tcycpattern_check(\"efef\",\"eeff\") => False\n\tcycpattern_check(\"himenss\",\"simen\") => True\n\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/154",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef even_odd_count(num):\n\t\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n\t Example:\n\t\teven_odd_count(-12) ==> (1, 1)\n\t\teven_odd_count(123) ==> (1, 2)\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/155",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef int_to_mini_roman(number):\n\t\"\"\"\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> int_to_mini_roman(19) == 'xix'\n\t>>> int_to_mini_roman(152) == 'clii'\n\t>>> int_to_mini_roman(426) == 'cdxxvi'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/156",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef right_angle_triangle(a, b, c):\n\t'''\n\tGiven the lengths of the three sides of a triangle. Return True if the three\n\tsides form a right-angled triangle, False otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or \n\t90 degree.\n\tExample:\n\tright_angle_triangle(3, 4, 5) == True\n\tright_angle_triangle(1, 2, 3) == False\n\t'''\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/157",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef find_max(words):\n\t\"\"\"Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n\tfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n\tfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/158",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef eat(number, need, remaining):\n\t\"\"\"\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\t\n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n\t\n\tVariables:\n\t@number : integer\n\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\tthe number of remaining carrots thet exist in stock\n\t\n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/159",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef do_algebra(operator, operand):\n\t\"\"\"\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\tOperand is a list of of non-negative integers.\n\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/160",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef solve(s):\n\t\"\"\"You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/161",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef string_to_md5(text):\n\t\"\"\"\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return None.\n\n\t>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/162",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef generate_integers(a, b):\n\t\"\"\"\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerate_integers(2, 8) => [2, 4, 6, 8]\n\tgenerate_integers(8, 2) => [2, 4, 6, 8]\n\tgenerate_integers(10, 14) => []\n\t\"\"\"\n\n\n### Response:",
        "input": "",
        "output": "HumanEval/163",
        "type": "humaneval"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the shared elements from the given two lists. Your code should satisfy the following assertion:\n```python\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/2",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to identify non-prime numbers. Your code should satisfy the following assertion:\n```python\nassert is_not_prime(2) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/3",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order. Your code should satisfy the following assertion:\n```python\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/4",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the two numbers differ at one bit position only or not. Your code should satisfy the following assertion:\n```python\nassert differ_At_One_Bit_Pos(13,9) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/6",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find all words which are at least 4 characters long in a string. Your code should satisfy the following assertion:\n```python\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/7",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find squares of individual elements in a list. Your code should satisfy the following assertion:\n```python\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/8",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string. Your code should satisfy the following assertion:\n```python\nassert find_Rotations(\"aaaa\") == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/9",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to remove first and last occurrence of a given character from the string. Your code should satisfy the following assertion:\n```python\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/11",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort a given matrix in ascending order according to the sum of its rows. Your code should satisfy the following assertion:\n```python\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/12",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the volume of a triangular prism. Your code should satisfy the following assertion:\n```python\nassert find_Volume(10,8,6) == 240\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/14",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise. Your code should satisfy the following assertion:\n```python\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/16",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that returns the perimeter of a square given its side length as input. Your code should satisfy the following assertion:\n```python\nassert square_perimeter(10)==40\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/17",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove characters from the first string which are present in the second string. Your code should satisfy the following assertion:\n```python\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/18",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find whether a given array of integers contains any duplicate element. Your code should satisfy the following assertion:\n```python\nassert test_duplicate(([1,2,3,4,5]))==False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/19",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if the given number is woodball or not. Your code should satisfy the following assertion:\n```python\nassert is_woodall(383) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/20",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check if a given number is one less than twice its reverse. Your code should satisfy the following assertion:\n```python\nassert check(70) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/56",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the largest number that can be formed with the given list of digits. Your code should satisfy the following assertion:\n```python\nassert find_Max_Num([1,2,3]) == 321\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/57",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the given two integers have opposite sign or not. Your code should satisfy the following assertion:\n```python\nassert opposite_Signs(1,-2) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/58",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the nth octagonal number. Your code should satisfy the following assertion:\n```python\nassert is_octagonal(5) == 65\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/59",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the number of substrings with the sum of digits equal to their length. Your code should satisfy the following assertion:\n```python\nassert count_Substrings('112112') == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/61",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find smallest number in a list. Your code should satisfy the following assertion:\n```python\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/62",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the maximum difference between available pairs in the given tuple list. Your code should satisfy the following assertion:\n```python\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/63",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort a list of tuples using the second value of each tuple. Your code should satisfy the following assertion:\n```python\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/64",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to flatten a list and sum all of its elements. Your code should satisfy the following assertion:\n```python\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/65",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the number of positive numbers in a list. Your code should satisfy the following assertion:\n```python\nassert pos_count([1,-2,3,-4]) == 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/66",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the number of ways to partition a set of Bell numbers. Your code should satisfy the following assertion:\n```python\nassert bell_number(2)==2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/67",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the given array is monotonic or not. Your code should satisfy the following assertion:\n```python\nassert is_Monotonic([6, 5, 4, 4]) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/68",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether a list contains the given sublist or not. Your code should satisfy the following assertion:\n```python\nassert is_sublist([2,4,3,5,7],[3,7])==False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/69",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find whether all the given tuples have equal length or not. Your code should satisfy the following assertion:\n```python\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/70",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/71",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the given number can be represented as the difference of two squares or not. Your code should satisfy the following assertion:\n```python\nassert dif_Square(5) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/72",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether it follows the sequence given in the patterns array. Your code should satisfy the following assertion:\n```python\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/74",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples. Your code should satisfy the following assertion:\n```python\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/75",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find whether a number is divisible by 11. Your code should satisfy the following assertion:\n```python\nassert is_Diff (12345) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/77",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the length of the word is odd or not. Your code should satisfy the following assertion:\n```python\nassert word_len(\"Hadoop\") == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/79",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the nth tetrahedral number. Your code should satisfy the following assertion:\n```python\nassert tetrahedral_number(5) == 35\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/80",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the volume of a sphere. Your code should satisfy the following assertion:\n```python\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/82",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26. Your code should satisfy the following assertion:\n```python\nassert get_Char(\"abc\") == \"f\"\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/83",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the nth number in the newman conway sequence. Your code should satisfy the following assertion:\n```python\nassert sequence(10) == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/84",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the surface area of a sphere. Your code should satisfy the following assertion:\n```python\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/85",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find nth centered hexagonal number. Your code should satisfy the following assertion:\n```python\nassert centered_hexagonal_number(10) == 271\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/86",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to merge three dictionaries into a single dictionary. Your code should satisfy the following assertion:\n```python\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/87",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary. Your code should satisfy the following assertion:\n```python\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/88",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the closest smaller number than n. Your code should satisfy the following assertion:\n```python\nassert closest_num(11) == 10\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/89",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the length of the longest word. Your code should satisfy the following assertion:\n```python\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/90",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if a string is present as a substring in a given list of string values. Your code should satisfy the following assertion:\n```python\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/91",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the given number is undulating or not. Your code should satisfy the following assertion:\n```python\nassert is_undulating(1212121) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/92",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to calculate the value of 'a' to the power 'b'. Your code should satisfy the following assertion:\n```python\nassert power(3,4) == 81\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/93",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value. Your code should satisfy the following assertion:\n```python\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/94",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the length of the smallest list in a list of lists. Your code should satisfy the following assertion:\n```python\nassert Find_Min_Length([[1],[1,2]]) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/95",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the number of divisors of a given integer. Your code should satisfy the following assertion:\n```python\nassert divisor(15) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/96",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary. Your code should satisfy the following assertion:\n```python\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/97",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to multiply all the numbers in a list and divide with the length of the list. Your code should satisfy the following assertion:\n```python\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/98",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros. Your code should satisfy the following assertion:\n```python\nassert decimal_to_binary(8) == '1000'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/99",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer. Your code should satisfy the following assertion:\n```python\nassert next_smallest_palindrome(99)==101\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/100",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the kth element in the given array using 1-based indexing. Your code should satisfy the following assertion:\n```python\nassert kth_element([12,3,5,7,19], 2) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/101",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert a snake case string to camel case string. Your code should satisfy the following assertion:\n```python\nassert snake_to_camel('python_program')=='PythonProgram'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/102",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the Eulerian number a(n, m). Your code should satisfy the following assertion:\n```python\nassert eulerian_num(3, 1) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/103",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort each sublist of strings in a given list of lists. Your code should satisfy the following assertion:\n```python\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/104",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count true booleans in the given list. Your code should satisfy the following assertion:\n```python\nassert count([True,False,True]) == 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/105",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to append the given list to the given tuples. Your code should satisfy the following assertion:\n```python\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/106",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to merge three lists into a single sorted list. Your code should satisfy the following assertion:\n```python\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/108",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times. Your code should satisfy the following assertion:\n```python\nassert odd_Equivalent(\"011001\",6) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/109",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the common elements in given nested lists. Your code should satisfy the following assertion:\n```python\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/111",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if a string represents an integer or not. Your code should satisfy the following assertion:\n```python\nassert check_integer(\"python\")==False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/113",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether all dictionaries in a list are empty or not. Your code should satisfy the following assertion:\n```python\nassert empty_dit([{},{},{}])==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/115",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert a given tuple of positive integers into a single integer. Your code should satisfy the following assertion:\n```python\nassert tuple_to_int((1,2,3))==123\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/116",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert all possible convertible elements in a list of lists to floats. Your code should satisfy the following assertion:\n```python\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/117",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert a string to a list of strings split on the space character. Your code should satisfy the following assertion:\n```python\nassert string_to_list(\"python programming\")==['python','programming']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/118",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the element that appears only once in a sorted array. Your code should satisfy the following assertion:\n```python\nassert search([1,1,2,2,3]) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/119",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list. Your code should satisfy the following assertion:\n```python\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/120",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sum all amicable numbers from 1 to a specified number. Your code should satisfy the following assertion:\n```python\nassert amicable_numbers_sum(999)==504\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/123",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to get the angle of a complex number. Your code should satisfy the following assertion:\n```python\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/124",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. Your code should satisfy the following assertion:\n```python\nassert find_length(\"11000010001\") == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/125",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of common divisors of two given numbers. Your code should satisfy the following assertion:\n```python\nassert sum(10,15) == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/126",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to multiply two integers. Your code should satisfy the following assertion:\n```python\nassert multiply_int(10,20)==200\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/127",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find words that are longer than n characters from a given list of words. Your code should satisfy the following assertion:\n```python\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/128",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to calculate whether the matrix is a magic square. Your code should satisfy the following assertion:\n```python\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/129",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the item with maximum frequency in a given list. Your code should satisfy the following assertion:\n```python\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/130",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel). Your code should satisfy the following assertion:\n```python\nassert reverse_vowels(\"Python\") == \"Python\"\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/131",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert a tuple to a string. Your code should satisfy the following assertion:\n```python\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/132",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to calculate the sum of the negative numbers of a given list of numbers. Your code should satisfy the following assertion:\n```python\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/133",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the nth hexagonal number. Your code should satisfy the following assertion:\n```python\nassert hexagonal_num(10) == 190\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/135",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers. Your code should satisfy the following assertion:\n```python\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/137",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. Your code should satisfy the following assertion:\n```python\nassert is_Sum_Of_Powers_Of_Two(10) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/138",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the circumference of a circle. Your code should satisfy the following assertion:\n```python\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/139",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to flatten the list of lists into a single set of numbers. Your code should satisfy the following assertion:\n```python\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/140",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort a list of elements. Your code should satisfy the following assertion:\n```python\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/141",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count number items that are identical in the same position of three given lists. Your code should satisfy the following assertion:\n```python\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/142",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find number of lists present in the given tuple. Your code should satisfy the following assertion:\n```python\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/143",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the maximum difference between any two elements in a given array. Your code should satisfy the following assertion:\n```python\nassert max_Abs_Diff((2,1,5,3)) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/145",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. Your code should satisfy the following assertion:\n```python\nassert find_solution(2, 3, 7) == (2, 1)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/160",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove all elements from a given list present in another list. Your code should satisfy the following assertion:\n```python\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/161",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0). Your code should satisfy the following assertion:\n```python\nassert sum_series(6) == 12\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/162",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to determine if the sum of the divisors of two integers are the same. Your code should satisfy the following assertion:\n```python\nassert are_equivalent(36, 57) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/164",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive). Your code should satisfy the following assertion:\n```python\nassert count_char_position(\"xbcefg\") == 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/165",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that counts the number of pairs of integers in a list that xor to an even number. Your code should satisfy the following assertion:\n```python\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/166",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the smallest power of 2 greater than or equal to n. Your code should satisfy the following assertion:\n```python\nassert next_power_of_2(0) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/167",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count the number of occurrences of a number in a given list. Your code should satisfy the following assertion:\n```python\nassert frequency([1,2,3], 4) == 0\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/168",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the sum of numbers in a list within a range specified by two indices. Your code should satisfy the following assertion:\n```python\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/170",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the perimeter of a regular pentagon from the length of its sides. Your code should satisfy the following assertion:\n```python\nassert perimeter_pentagon(5) == 25\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/171",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count the number of occurence of the string 'std' in a given string. Your code should satisfy the following assertion:\n```python\nassert count_occurance(\"letstdlenstdporstd\") == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/172",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if all the elements in tuple have same data type or not. Your code should satisfy the following assertion:\n```python\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/222",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.). Your code should satisfy the following assertion:\n```python\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/223",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number. Your code should satisfy the following assertion:\n```python\nassert count_Set_Bits(2) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/224",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to remove the characters which have odd index values of a given string. Your code should satisfy the following assertion:\n```python\nassert odd_values_string('abcdef') == 'ace'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/226",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find minimum of three numbers. Your code should satisfy the following assertion:\n```python\nassert min_of_three(10,20,0)==0\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/227",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. Your code should satisfy the following assertion:\n```python\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/229",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string. Your code should satisfy the following assertion:\n```python\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/230",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list. Your code should satisfy the following assertion:\n```python\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/232",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the lateral surface area of a cylinder. Your code should satisfy the following assertion:\n```python\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/233",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the volume of a cube given its side length. Your code should satisfy the following assertion:\n```python\nassert volume_cube(3)==27\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/234",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to set all even bits of a given number. Your code should satisfy the following assertion:\n```python\nassert even_bit_set_number(10) == 10\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/235",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. Your code should satisfy the following assertion:\n```python\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/237",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the number of non-empty substrings of a given string. Your code should satisfy the following assertion:\n```python\nassert number_of_substrings(\"abc\") == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/238",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. Your code should satisfy the following assertion:\n```python\nassert get_total_number_of_sequences(10, 4) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/239",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list. Your code should satisfy the following assertion:\n```python\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/240",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count the total number of characters in a string. Your code should satisfy the following assertion:\n```python\nassert count_charac(\"python programming\")==18\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/242",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the next perfect square greater than a given number. Your code should satisfy the following assertion:\n```python\nassert next_Perfect_Square(35) == 36\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/244",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing. Your code should satisfy the following assertion:\n```python\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/245",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the length of the longest palindromic subsequence in the given string. Your code should satisfy the following assertion:\n```python\nassert lps(\"TENS FOR TENS\") == 5\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/247",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the intersection of two arrays. Your code should satisfy the following assertion:\n```python\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/249",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple. Your code should satisfy the following assertion:\n```python\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/250",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list. Your code should satisfy the following assertion:\n```python\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/251",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to convert complex numbers to polar coordinates. Your code should satisfy the following assertion:\n```python\nassert convert(1) == (1.0, 0.0)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/252",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function that returns the number of integer elements in a given list. Your code should satisfy the following assertion:\n```python\nassert count_integer([1,2,'abc',1.2]) == 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/253",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination. Your code should satisfy the following assertion:\n```python\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/255",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number. Your code should satisfy the following assertion:\n```python\nassert count_Primes_nums(5) == 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/256",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number. Your code should satisfy the following assertion:\n```python\nassert swap_numbers(10,20)==(20,10)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/257",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to maximize the given two tuples. Your code should satisfy the following assertion:\n```python\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/259",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number. Your code should satisfy the following assertion:\n```python\nassert newman_prime(3) == 7\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/260",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples. Your code should satisfy the following assertion:\n```python\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/261",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple. Your code should satisfy the following assertion:\n```python\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/262",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to calculate a dog's age in dog's years. Your code should satisfy the following assertion:\n```python\nassert dog_age(12)==61\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/264",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. Your code should satisfy the following assertion:\n```python\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/265",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the lateral surface area of a cube given its side length. Your code should satisfy the following assertion:\n```python\nassert lateralsurface_cube(5)==100\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/266",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers. Your code should satisfy the following assertion:\n```python\nassert square_Sum(2) == 10\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/267",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the n'th star number. Your code should satisfy the following assertion:\n```python\nassert find_star_num(3) == 37\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/268",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the ascii value of a character. Your code should satisfy the following assertion:\n```python\nassert ascii_value('A')==65\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/269",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of even numbers at even positions of a list. Your code should satisfy the following assertion:\n```python\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/270",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. Your code should satisfy the following assertion:\n```python\nassert even_Power_Sum(2) == 1056\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/271",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple. Your code should satisfy the following assertion:\n```python\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/272",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index. Your code should satisfy the following assertion:\n```python\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/273",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients. Your code should satisfy the following assertion:\n```python\nassert even_binomial_Coeff_Sum(4) == 8\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/274",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in the radius and height of a cylinder and returns the the volume. Your code should satisfy the following assertion:\n```python\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/276",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n. Your code should satisfy the following assertion:\n```python\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/277",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple. Your code should satisfy the following assertion:\n```python\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/278",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the nth decagonal number. Your code should satisfy the following assertion:\n```python\nassert is_num_decagonal(3) == 27\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/279",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found). Your code should satisfy the following assertion:\n```python\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/280",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check if the elements of a given list are unique or not. Your code should satisfy the following assertion:\n```python\nassert all_unique([1,2,3]) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/281",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to subtract two lists element-wise. Your code should satisfy the following assertion:\n```python\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/282",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. Your code should satisfy the following assertion:\n```python\nassert validate(1234) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/283",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element. Your code should satisfy the following assertion:\n```python\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/284",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters. Your code should satisfy the following assertion:\n```python\nassert text_match_two_three(\"ac\")==(False)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/285",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times. Your code should satisfy the following assertion:\n```python\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/286",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers. Your code should satisfy the following assertion:\n```python\nassert square_Sum(2) == 20\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/287",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the list of maximum length in a list of lists. Your code should satisfy the following assertion:\n```python\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/290",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer). Your code should satisfy the following assertion:\n```python\nassert find(10,3) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/292",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the third side of a right angled triangle. Your code should satisfy the following assertion:\n```python\nassert otherside_rightangle(7,8)==10.63014581273465\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/293",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the maximum value in a given heterogeneous list. Your code should satisfy the following assertion:\n```python\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/294",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to return the sum of all divisors of a number. Your code should satisfy the following assertion:\n```python\nassert sum_div(8)==7\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/295",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count inversions in an array. Your code should satisfy the following assertion:\n```python\nassert get_Inv_Count([1,20,6,4,5]) == 5\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/296",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to flatten a given nested list structure. Your code should satisfy the following assertion:\n```python\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/297",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to calculate the maximum aggregate from the list of tuples. Your code should satisfy the following assertion:\n```python\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/299",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Your code should satisfy the following assertion:\n```python\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/300",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the depth of a dictionary. Your code should satisfy the following assertion:\n```python\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/301",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to return two words from a list of words starting with letter 'p'. Your code should satisfy the following assertion:\n```python\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/305",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i . Your code should satisfy the following assertion:\n```python\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/306",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list. Your code should satisfy the following assertion:\n```python\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/308",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the maximum of two numbers. Your code should satisfy the following assertion:\n```python\nassert maximum(5,10) == 10\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/309",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert a given string to a tuple of characters. Your code should satisfy the following assertion:\n```python\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/310",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to set the left most unset bit. Your code should satisfy the following assertion:\n```python\nassert set_left_most_unset_bit(10) == 14\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/311",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the volume of a cone. Your code should satisfy the following assertion:\n```python\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/312",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the highest power of 2 that is less than or equal to n. Your code should satisfy the following assertion:\n```python\nassert highest_Power_of_2(10) == 8\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/388",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the n'th lucas number. Your code should satisfy the following assertion:\n```python\nassert find_lucas(9) == 76\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/389",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to apply a given format string to all of the elements in a list. Your code should satisfy the following assertion:\n```python\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/390",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert more than one list to nested dictionary. Your code should satisfy the following assertion:\n```python\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/391",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Your code should satisfy the following assertion:\n```python\nassert get_max_sum(60) == 106\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/392",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if given tuple contains no duplicates. Your code should satisfy the following assertion:\n```python\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/394",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the first non-repeated character in a given string. Your code should satisfy the following assertion:\n```python\nassert first_non_repeating_character(\"abcabc\") == None\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/395",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the given string starts and ends with the same character or not. Your code should satisfy the following assertion:\n```python\nassert check_char(\"abba\") == \"Valid\"\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/396",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the median of three numbers. Your code should satisfy the following assertion:\n```python\nassert median_numbers(25,55,65)==55.0\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/397",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to compute the sum of digits of each number of a given list. Your code should satisfy the following assertion:\n```python\nassert sum_of_digits([10,2,56])==14\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/398",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to extract the number of unique tuples in the given list. Your code should satisfy the following assertion:\n```python\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/400",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the minimum of two numbers. Your code should satisfy the following assertion:\n```python\nassert minimum(1,2) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/404",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether an element exists within a tuple. Your code should satisfy the following assertion:\n```python\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/405",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find whether the parity of a given number is odd. Your code should satisfy the following assertion:\n```python\nassert find_Parity(12) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/406",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to create the next bigger number by rearranging the digits of a given number. Your code should satisfy the following assertion:\n```python\nassert rearrange_bigger(12)==21\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/407",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the minimum product from the pairs of tuples within a given list. Your code should satisfy the following assertion:\n```python\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/409",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the minimum value in a given heterogeneous list. Your code should satisfy the following assertion:\n```python\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/410",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to remove odd numbers from a given list. Your code should satisfy the following assertion:\n```python\nassert remove_odd([1,2,3]) == [2]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/412",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to extract the nth element from a given list of tuples. Your code should satisfy the following assertion:\n```python\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/413",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether any value in a sequence exists in a sequence or not. Your code should satisfy the following assertion:\n```python\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/414",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find a pair with highest product from a given array of integers. Your code should satisfy the following assertion:\n```python\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/415",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the element of a list having maximum length. Your code should satisfy the following assertion:\n```python\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/418",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. Your code should satisfy the following assertion:\n```python\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/419",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the cube sum of first n even natural numbers. Your code should satisfy the following assertion:\n```python\nassert cube_Sum(2) == 72\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/420",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to concatenate each element of tuple by the delimiter. Your code should satisfy the following assertion:\n```python\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/421",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the average of cubes of first n natural numbers. Your code should satisfy the following assertion:\n```python\nassert find_Average_Of_Cube(2) == 4.5\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/422",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to extract only the rear index element of each string in the given tuple. Your code should satisfy the following assertion:\n```python\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/424",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count the number of sublists containing a particular element. Your code should satisfy the following assertion:\n```python\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/425",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to filter odd numbers. Your code should satisfy the following assertion:\n```python\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/426",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format. Your code should satisfy the following assertion:\n```python\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/427",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort the given array by using shell sort. Your code should satisfy the following assertion:\n```python\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/428",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to extract the elementwise and tuples from the given two tuples. Your code should satisfy the following assertion:\n```python\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/429",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the directrix of a parabola. Your code should satisfy the following assertion:\n```python\nassert parabola_directrix(5,3,2)==-198\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/430",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes two lists and returns true if they have at least one common element. Your code should satisfy the following assertion:\n```python\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/431",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the median length of a trapezium. Your code should satisfy the following assertion:\n```python\nassert median_trapezium(15,25,35)==20\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/432",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the entered number is greater than the elements of the given array. Your code should satisfy the following assertion:\n```python\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/433",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the last digit of a given number. Your code should satisfy the following assertion:\n```python\nassert last_Digit(123) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/435",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to return the negative numbers in a list. Your code should satisfy the following assertion:\n```python\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/436",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove odd characters in a string. Your code should satisfy the following assertion:\n```python\nassert remove_odd(\"python\")==(\"yhn\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/437",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count bidirectional tuple pairs. Your code should satisfy the following assertion:\n```python\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/438",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to join a list of multiple integers into a single integer. Your code should satisfy the following assertion:\n```python\nassert multiple_to_single([11, 33, 50])==113350\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/439",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the first adverb and their positions in a given sentence. Your code should satisfy the following assertion:\n```python\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/440",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the surface area of a cube of a given size. Your code should satisfy the following assertion:\n```python\nassert surfacearea_cube(5)==150\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/441",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the ration of positive numbers in an array of integers. Your code should satisfy the following assertion:\n```python\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/442",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples. Your code should satisfy the following assertion:\n```python\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/445",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the occurence of all elements of list in a tuple. Your code should satisfy the following assertion:\n```python\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/446",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find cubes of individual elements in a list. Your code should satisfy the following assertion:\n```python\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/447",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to calculate the sum of perrin numbers. Your code should satisfy the following assertion:\n```python\nassert cal_sum(9) == 49\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/448",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to extract specified size of strings from a given list of string values. Your code should satisfy the following assertion:\n```python\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/450",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove all whitespaces from the given string. Your code should satisfy the following assertion:\n```python\nassert remove_whitespaces(' Google\tFlutter ') == 'GoogleFlutter'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/451",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of even factors of a number. Your code should satisfy the following assertion:\n```python\nassert sumofFactors(18) == 26\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/453",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that matches a word containing 'z'. Your code should satisfy the following assertion:\n```python\nassert text_match_wordz(\"pythonz.\")==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/454",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the given month number contains 31 days or not. Your code should satisfy the following assertion:\n```python\nassert check_monthnumb_number(5)==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/455",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to reverse each string in a given list of string values. Your code should satisfy the following assertion:\n```python\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/456",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sublist having minimum length. Your code should satisfy the following assertion:\n```python\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/457",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the area of a rectangle. Your code should satisfy the following assertion:\n```python\nassert rectangle_area(10,20)==200\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/458",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove uppercase substrings from a given string. Your code should satisfy the following assertion:\n```python\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/459",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to get the first element of each sublist. Your code should satisfy the following assertion:\n```python\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/460",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the upper case characters in a given string. Your code should satisfy the following assertion:\n```python\nassert upper_ctr('PYthon') == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/461",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find all possible combinations of the elements of a given list. Your code should satisfy the following assertion:\n```python\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/462",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the maximum product subarray of the given array. Your code should satisfy the following assertion:\n```python\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/463",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to drop empty items from a given dictionary. Your code should satisfy the following assertion:\n```python\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/465",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. Your code should satisfy the following assertion:\n```python\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/468",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple. Your code should satisfy the following assertion:\n```python\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/470",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the product of the array multiplication modulo n. Your code should satisfy the following assertion:\n```python\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/471",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the given list contains consecutive numbers or not. Your code should satisfy the following assertion:\n```python\nassert check_Consecutive([1,2,3,4,5]) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/472",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order. Your code should satisfy the following assertion:\n```python\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/473",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to replace characters in a string. Your code should satisfy the following assertion:\n```python\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/474",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort a dictionary by value. Your code should satisfy the following assertion:\n```python\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/475",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of the largest and smallest value in a given array. Your code should satisfy the following assertion:\n```python\nassert big_sum([1,2,3]) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/476",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to convert the given string to lower case. Your code should satisfy the following assertion:\n```python\nassert is_lower(\"InValid\") == \"invalid\"\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/477",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove lowercase substrings from a given string. Your code should satisfy the following assertion:\n```python\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/478",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the first digit of a given number. Your code should satisfy the following assertion:\n```python\nassert first_Digit(123) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/479",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function which takes a list of integers and only returns the odd ones. Your code should satisfy the following assertion:\n```python\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/554",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers. Your code should satisfy the following assertion:\n```python\nassert difference(3) == 30\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/555",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the number of pairs whose xor value is odd. Your code should satisfy the following assertion:\n```python\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/556",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to toggle the case of all characters in a string. Your code should satisfy the following assertion:\n```python\nassert toggle_string(\"Python\")==(\"pYTHON\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/557",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of the per-digit difference between two integers. Your code should satisfy the following assertion:\n```python\nassert digit_distance_nums(1,2) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/558",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the sum of the largest contiguous sublist in the given list. Your code should satisfy the following assertion:\n```python\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/559",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the union of the elements of two given tuples and output them in sorted order. Your code should satisfy the following assertion:\n```python\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/560",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the length of the longest sublists. Your code should satisfy the following assertion:\n```python\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/562",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to extract values between quotation marks from a string. Your code should satisfy the following assertion:\n```python\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/563",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. Your code should satisfy the following assertion:\n```python\nassert count_Pairs([1,2,1],3) == 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/564",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to split a string into characters. Your code should satisfy the following assertion:\n```python\nassert split('python') == ['p','y','t','h','o','n']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/565",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to get the sum of the digits of a non-negative integer. Your code should satisfy the following assertion:\n```python\nassert sum_digits(345)==12\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/566",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether a specified list is sorted or not. Your code should satisfy the following assertion:\n```python\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/567",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to create a list of N empty dictionaries. Your code should satisfy the following assertion:\n```python\nassert empty_list(5)==[{},{},{},{},{}]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/568",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort each sublist of strings in a given list of lists. Your code should satisfy the following assertion:\n```python\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/569",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to remove duplicate numbers from a given number of lists. Your code should satisfy the following assertion:\n```python\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/572",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to calculate the product of the unique numbers in a given list. Your code should satisfy the following assertion:\n```python\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/573",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the surface area of a cylinder. Your code should satisfy the following assertion:\n```python\nassert surfacearea_cylinder(10,5)==942.45\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/574",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether a list is sublist of another or not. Your code should satisfy the following assertion:\n```python\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/576",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the last digit in factorial of a given number. Your code should satisfy the following assertion:\n```python\nassert last_Digit_Factorial(4) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/577",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to interleave 3 lists of the same length into a single flat list. Your code should satisfy the following assertion:\n```python\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/578",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the dissimilar elements in the given two tuples. Your code should satisfy the following assertion:\n```python\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/579",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove uneven elements in the nested mixed tuple. Your code should satisfy the following assertion:\n```python\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/580",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the surface area of a square pyramid with a given base edge and height. Your code should satisfy the following assertion:\n```python\nassert surface_Area(3,4) == 33\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/581",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if a dictionary is empty. Your code should satisfy the following assertion:\n```python\nassert my_dict({10})==False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/582",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function which returns nth catalan number. Your code should satisfy the following assertion:\n```python\nassert catalan_number(10)==16796\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/583",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the n most expensive items in a given dataset. Your code should satisfy the following assertion:\n```python\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/585",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to split a list at the nth eelment and add the first part to the end. Your code should satisfy the following assertion:\n```python\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/586",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert a list to a tuple. Your code should satisfy the following assertion:\n```python\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/587",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the difference between largest and smallest value in a given list. Your code should satisfy the following assertion:\n```python\nassert big_diff([1,2,3,4]) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/588",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find perfect squares between two given numbers. Your code should satisfy the following assertion:\n```python\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/589",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert polar coordinates to rectangular coordinates. Your code should satisfy the following assertion:\n```python\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/590",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to interchange the first and last elements in a list. Your code should satisfy the following assertion:\n```python\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/591",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of the product of consecutive binomial co-efficients. Your code should satisfy the following assertion:\n```python\nassert sum_Of_product(3) == 15\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/592",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove leading zeroes from an ip address. Your code should satisfy the following assertion:\n```python\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/593",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the difference of the first even and first odd number of a given list. Your code should satisfy the following assertion:\n```python\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/594",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another. Your code should satisfy the following assertion:\n```python\nassert min_Swaps(\"1101\",\"1110\") == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/595",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the size in bytes of the given tuple. Your code should satisfy the following assertion:\n```python\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/596",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find kth element from the given two sorted arrays. Your code should satisfy the following assertion:\n```python\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/597",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the given number is armstrong or not. Your code should satisfy the following assertion:\n```python\nassert armstrong_number(153)==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/598",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find sum and average of first n natural numbers. Your code should satisfy the following assertion:\n```python\nassert sum_average(10)==(55, 5.5)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/599",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the given number is even or not. Your code should satisfy the following assertion:\n```python\nassert is_Even(1) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/600",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the first repeated character in a given string. Your code should satisfy the following assertion:\n```python\nassert first_repeated_char(\"abcabc\") == \"a\"\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/602",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to get all lucid numbers smaller than or equal to a given integer. Your code should satisfy the following assertion:\n```python\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/603",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to reverse words seperated by spaces in a given string. Your code should satisfy the following assertion:\n```python\nassert reverse_words(\"python program\")==(\"program python\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/604",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if the given integer is a prime number. Your code should satisfy the following assertion:\n```python\nassert prime_num(13)==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/605",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert degrees to radians. Your code should satisfy the following assertion:\n```python\nassert radian_degree(90)==1.5707963267948966\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/606",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. Your code should satisfy the following assertion:\n```python\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/607",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find nth bell number. Your code should satisfy the following assertion:\n```python\nassert bell_Number(2) == 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/608",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed. Your code should satisfy the following assertion:\n```python\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/610",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column. Your code should satisfy the following assertion:\n```python\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/611",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second. Your code should satisfy the following assertion:\n```python\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/612",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list. Your code should satisfy the following assertion:\n```python\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/614",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list. Your code should satisfy the following assertion:\n```python\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/615",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function which takes two tuples of the same length and performs the element wise modulo. Your code should satisfy the following assertion:\n```python\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/616",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to divide two lists element wise. Your code should satisfy the following assertion:\n```python\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/618",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to move all the numbers to the end of the given string. Your code should satisfy the following assertion:\n```python\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/619",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible. Your code should satisfy the following assertion:\n```python\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/620",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the median of two sorted lists of same size. Your code should satisfy the following assertion:\n```python\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/622",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to compute the n-th power of each number in a list. Your code should satisfy the following assertion:\n```python\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/623",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to convert a given string to uppercase. Your code should satisfy the following assertion:\n```python\nassert is_upper(\"person\") ==\"PERSON\"\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/624",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius. Your code should satisfy the following assertion:\n```python\nassert triangle_area(-1) == None\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/626",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to replace all spaces in the given string with '%20'. Your code should satisfy the following assertion:\n```python\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/628",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find even numbers from a list of numbers. Your code should satisfy the following assertion:\n```python\nassert Split([1,2,3,4,5]) == [2,4]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/629",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple. Your code should satisfy the following assertion:\n```python\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/630",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to replace whitespaces with an underscore and vice versa in a given string. Your code should satisfy the following assertion:\n```python\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/631",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to move all zeroes to the end of the given list. Your code should satisfy the following assertion:\n```python\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/632",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of xor of all pairs of numbers in the given list. Your code should satisfy the following assertion:\n```python\nassert pair_xor_Sum([5,9,7,6],4) == 47\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/633",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort the given list. Your code should satisfy the following assertion:\n```python\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/635",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the given amount has no profit and no loss. Your code should satisfy the following assertion:\n```python\nassert noprofit_noloss(1500,1200)==False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/637",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius. Your code should satisfy the following assertion:\n```python\nassert wind_chill(120,35)==40\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/638",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter. Your code should satisfy the following assertion:\n```python\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/639",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove the parenthesis and what is inbetween them from a string. Your code should satisfy the following assertion:\n```python\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/640",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the nth nonagonal number. Your code should satisfy the following assertion:\n```python\nassert is_nonagonal(10) == 325\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/641",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that checks if a strings contains 'z', except at the start and end of the word. Your code should satisfy the following assertion:\n```python\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/643",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to reverse an array upto a given position. Your code should satisfy the following assertion:\n```python\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/644",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to add a dictionary to the tuple. The output should be a tuple. Your code should satisfy the following assertion:\n```python\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/720",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path. Your code should satisfy the following assertion:\n```python\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/721",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum. Your code should satisfy the following assertion:\n```python\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/722",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values. Your code should satisfy the following assertion:\n```python\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/723",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power. Your code should satisfy the following assertion:\n```python\nassert power_base_sum(2,100)==115\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/724",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to extract values between quotation marks \" \" of the given string. Your code should satisfy the following assertion:\n```python\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/725",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}. Your code should satisfy the following assertion:\n```python\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/726",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Your code should satisfy the following assertion:\n```python\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/728",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove consecutive duplicates of a given list. Your code should satisfy the following assertion:\n```python\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/730",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the lateral surface area of a cone given radius r and the height h. Your code should satisfy the following assertion:\n```python\nassert lateralsurface_cone(5,12)==204.20352248333654\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/731",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon. Your code should satisfy the following assertion:\n```python\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/732",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the index of the first occurrence of a given number in a sorted array. Your code should satisfy the following assertion:\n```python\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/733",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/. Your code should satisfy the following assertion:\n```python\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/734",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/. Your code should satisfy the following assertion:\n```python\nassert toggle_middle_bits(9) == 15\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/735",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php. Your code should satisfy the following assertion:\n```python\nassert left_insertion([1,2,4,5],6)==4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/736",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the given string is starting with a vowel or not using regex. Your code should satisfy the following assertion:\n```python\nassert check_str(\"annie\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/737",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/. Your code should satisfy the following assertion:\n```python\nassert find_Index(2) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/739",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/. Your code should satisfy the following assertion:\n```python\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/740",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether all the characters are same or not. Your code should satisfy the following assertion:\n```python\nassert all_Characters_Same(\"python\") == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/741",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to caluclate the area of a tetrahedron. Your code should satisfy the following assertion:\n```python\nassert area_tetrahedron(3)==15.588457268119894\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/742",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/. Your code should satisfy the following assertion:\n```python\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/743",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if the given tuple has any none value or not. Your code should satisfy the following assertion:\n```python\nassert check_none((10, 4, 5, 6, None)) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/744",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php. Your code should satisfy the following assertion:\n```python\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/745",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees. Your code should satisfy the following assertion:\n```python\nassert sector_area(4,45)==6.283185307179586\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/746",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to put spaces between words starting with capital letters in a given string. Your code should satisfy the following assertion:\n```python\nassert capital_words_spaces(\"Python\") == 'Python'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/748",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/. Your code should satisfy the following assertion:\n```python\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/749",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to add the given tuple to the given list. Your code should satisfy the following assertion:\n```python\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/750",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/. Your code should satisfy the following assertion:\n```python\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/751",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ... Your code should satisfy the following assertion:\n```python\nassert jacobsthal_num(5) == 11\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/752",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases. Your code should satisfy the following assertion:\n```python\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/753",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list. Your code should satisfy the following assertion:\n```python\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/754",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the second smallest number in a list. Your code should satisfy the following assertion:\n```python\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/755",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/. Your code should satisfy the following assertion:\n```python\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/757",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list. Your code should satisfy the following assertion:\n```python\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/758",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether a given string is a decimal number with a precision of 2. Your code should satisfy the following assertion:\n```python\nassert is_decimal('123.11')==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/759",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether a list of numbers contains only one distinct element or not. Your code should satisfy the following assertion:\n```python\nassert unique_Element([1,1,1]) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/760",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12. Your code should satisfy the following assertion:\n```python\nassert check_monthnumber_number(6)==True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/762",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/. Your code should satisfy the following assertion:\n```python\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/763",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count number of digits in a given string. Your code should satisfy the following assertion:\n```python\nassert number_ctr('program2bedone') == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/764",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/. Your code should satisfy the following assertion:\n```python\nassert is_polite(7) == 11\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/765",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to return a list of all pairs of consecutive items in a given list. Your code should satisfy the following assertion:\n```python\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/766",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,. Your code should satisfy the following assertion:\n```python\nassert get_pairs_count([1,1,1,1],2) == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/767",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to get the difference between two lists. Your code should satisfy the following assertion:\n```python\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/769",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of fourth power of first n odd natural numbers. Your code should satisfy the following assertion:\n```python\nassert odd_num_sum(2) == 82\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/770",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/. Your code should satisfy the following assertion:\n```python\nassert check_expression(\"{()}[{}]\") == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/771",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove all the words with k length in the given string. Your code should satisfy the following assertion:\n```python\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/772",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match. Your code should satisfy the following assertion:\n```python\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/773",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether every odd index contains odd numbers of a given list. Your code should satisfy the following assertion:\n```python\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/775",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of non-repeated elements in a given list. Your code should satisfy the following assertion:\n```python\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/777",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to pack consecutive duplicates of a given list elements into sublists. Your code should satisfy the following assertion:\n```python\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/778",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/. Your code should satisfy the following assertion:\n```python\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/780",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php. Your code should satisfy the following assertion:\n```python\nassert count_divisors(10)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/781",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/. Your code should satisfy the following assertion:\n```python\nassert odd_length_sum([1,2,4]) == 14\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/782",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/. Your code should satisfy the following assertion:\n```python\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/783",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find the product of first even and odd number of a given list. Your code should satisfy the following assertion:\n```python\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/784",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to convert tuple string to integer tuple. Your code should satisfy the following assertion:\n```python\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/785",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to locate the right insertion point for a specified value in sorted order. Your code should satisfy the following assertion:\n```python\nassert right_insertion([1,2,4,5],6)==4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/786",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that matches a string that has an a followed by three 'b'. Your code should satisfy the following assertion:\n```python\nassert not text_match_three(\"ac\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/787",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to create a new tuple from the given string and list. Your code should satisfy the following assertion:\n```python\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/788",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to check whether every even index contains even numbers of a given list. Your code should satisfy the following assertion:\n```python\nassert even_position([3,2,1]) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/790",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove tuples from the given tuple. Your code should satisfy the following assertion:\n```python\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/791",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the number of lists in a given number of lists. Your code should satisfy the following assertion:\n```python\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/792",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the last position of an element in a sorted array. Your code should satisfy the following assertion:\n```python\nassert last([1,2,3],1) == 0\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/793",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'. Your code should satisfy the following assertion:\n```python\nassert text_starta_endb(\"aabbbb\")\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/794",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite function to find the sum of all items in the given dictionary. Your code should satisfy the following assertion:\n```python\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/796",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of all odd natural numbers within the range l and r. Your code should satisfy the following assertion:\n```python\nassert sum_in_range(2,5) == 8\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/797",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the sum of an array. Your code should satisfy the following assertion:\n```python\nassert _sum([1, 2, 3]) == 6\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/798",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit. Your code should satisfy the following assertion:\n```python\nassert left_rotate(16,2) == 64\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/799",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to remove all whitespaces from a string. Your code should satisfy the following assertion:\n```python\nassert remove_all_spaces('python  program')==('pythonprogram')\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/800",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to count the number of equal numbers from three given integers. Your code should satisfy the following assertion:\n```python\nassert test_three_equal(1,1,1) == 3\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/801",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/. Your code should satisfy the following assertion:\n```python\nassert not is_perfect_square(10)\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/803",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check whether the product of numbers in a list is even or not. Your code should satisfy the following assertion:\n```python\nassert is_product_even([1,2,3])\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/804",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function that returns the list in a list of lists whose sum of elements is the highest. Your code should satisfy the following assertion:\n```python\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/805",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to find maximum run of uppercase characters in the given string. Your code should satisfy the following assertion:\n```python\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/806",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a python function to find the first odd number in a given list of numbers. Your code should satisfy the following assertion:\n```python\nassert first_odd([1,3,5]) == 1\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/807",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if the given tuples contain the k or not. Your code should satisfy the following assertion:\n```python\nassert check_K((10, 4, 5, 6, 8), 6) == True\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/808",
        "type": "mbpp"
    },
    {
        "instruction": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple. Your code should satisfy the following assertion:\n```python\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n```\n\n### Response:",
        "input": "",
        "output": "Mbpp/809",
        "type": "mbpp"
    }
]